{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","App","props","state","title","image","preview","recipes","handleSubmit","bind","handleChange","handleImageChange","get","then","res","setState","data","catch","error","console","log","e","preventDefault","formData","FormData","append","this","post","headers","push","target","name","value","file","files","reader","FileReader","onloadend","result","readAsDataURL","map","recipe","key","id","created_by","src","alt","width","Fragment","className","onSubmit","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTAIAA,IAAMC,SAASC,eAAiB,YAChCF,IAAMC,SAASE,eAAiB,c,IA4GjBC,E,YAzGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPC,MAAO,KACPC,QAAS,GACTC,QAAS,IAGX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,kBAAoB,EAAKA,kBAAkBF,KAAvB,gBAXR,E,iFAeE,IAAD,OAClBZ,IAAMe,IAAI,oBACTC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAACR,QAAQO,EAAIE,UAE5BC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,mCAIHG,GAAI,IAAD,OACdA,EAAEC,iBAEF,IAAIC,EAAW,IAAIC,SACnBD,EAASE,OAAO,QAASC,KAAKvB,MAAMC,OACpCmB,EAASE,OAAO,QAASC,KAAKvB,MAAME,OAEpCR,IAAM8B,KAAK,mBAAoBJ,EAAU,CACvCK,QAAS,CACP,eAAgB,yBAGnBf,MAAK,SAAAC,GACO,YAAO,EAAKX,MAAMI,SACrBsB,KAAKf,EAAIE,MAEjB,EAAKD,SAAS,CACZX,MAAO,GACPC,MAAO,KACPC,QAAS,QAGZW,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,mCAIHG,GACXK,KAAKX,SAAL,eAAgBM,EAAES,OAAOC,KAAOV,EAAES,OAAOE,U,wCAGzBX,GAAI,IAAD,OACfY,EAAOZ,EAAES,OAAOI,MAAM,GAC1BR,KAAKX,SAAS,CAACV,MAAO4B,IAEtB,IAAIE,EAAS,IAAIC,WACjBD,EAAOE,UAAY,WACjB,EAAKtB,SAAS,CAACT,QAAS6B,EAAOG,UAGjCH,EAAOI,cAAcN,K,+BAKrB,IAAI1B,EAAUmB,KAAKvB,MAAMI,QAAQiC,KAAI,SAAAC,GAAM,OACzC,wBAAIC,IAAKD,EAAOE,IACd,2BAAIF,EAAOrC,OADb,OAC2B,2BAAIqC,EAAOG,YACpC,yBAAKC,IAAKJ,EAAOpC,MAAOyC,IAAKL,EAAOrC,MAAO2C,MAAM,YAGrD,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAlB,gBAEE,6BAAK,6BAAK,6BACV,0BAAMC,SAAUxB,KAAKlB,cAArB,eAEE,6BAAK,6BAFP,UAGS,2BAAO2C,KAAK,OAAOpB,KAAK,QAAQC,MAAON,KAAKvB,MAAMC,MAAOgD,SAAU1B,KAAKhB,eAAe,6BAAK,6BAHrG,UAIS,2BAAOyC,KAAK,OAAOpB,KAAK,QAAQqB,SAAU1B,KAAKf,oBAAoB,6BAAK,6BAC9Ee,KAAKvB,MAAME,MACV,yBAAKwC,IAAKnB,KAAKvB,MAAMG,QAASwC,IAAI,YAElC,KAGF,2CAEF,4BACGvC,U,GAjGG8C,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,MAAK,SAAAsD,GACjCA,EAAaC,kB","file":"static/js/main.67f993a7.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './App.css';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      image: null,\n      preview: '',\n      recipes: [],\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleImageChange = this.handleImageChange.bind(this);\n\n  }\n\n  componentDidMount() {\n    axios.get('/api/v1/recipes/')\n    .then(res => {\n      this.setState({recipes:res.data});\n    })\n    .catch(error => {\n      console.log(error)\n    })\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = new FormData();\n    formData.append('title', this.state.title);\n    formData.append('image', this.state.image);\n\n    axios.post('/api/v1/recipes/', formData, {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    })\n    .then(res => {\n      let recipes = [...this.state.recipes];\n      recipes.push(res.data);\n\n      this.setState({\n        title: '',\n        image: null,\n        preview: '',\n      })\n    })\n    .catch(error => {\n      console.log(error)\n    })\n  }\n\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  handleImageChange(e) {\n    let file = e.target.files[0];\n    this.setState({image: file});\n    \n    let reader = new FileReader();\n    reader.onloadend = () => {\n      this.setState({preview: reader.result})\n    };\n\n    reader.readAsDataURL(file);\n  }\n\n\n  render() {\n    let recipes = this.state.recipes.map(recipe => (\n      <li key={recipe.id}>\n        <p>{recipe.title}</p> by <p>{recipe.created_by}</p>\n        <img src={recipe.image} alt={recipe.title} width=\"200\"/>\n      </li>\n    ));\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            Hello, world!\n            <br/><br/><br/>\n            <form onSubmit={this.handleSubmit}>\n              Image Upload\n              <br/><br/>\n              Title: <input type='text' name='title' value={this.state.title} onChange={this.handleChange}/><br/><br/>\n              Image: <input type='file' name='image' onChange={this.handleImageChange}/><br/><br/>\n              {this.state.image ? (\n                <img src={this.state.preview} alt='preview'/>\n              ) : (\n                null\n              )}\n              \n              <button>Upload</button>\n            </form>\n            <ul>\n              {recipes}\n            </ul>\n          </header>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}