{"version":3,"sources":["Login.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","Login","handleSubmit","e","preventDefault","post","username","email","password","then","res","console","log","catch","error","onSubmit","this","React","Component","App","props","state","title","image","preview","recipes","bind","handleChange","handleDelete","handleImageChange","get","setState","data","formData","FormData","append","headers","push","target","name","value","file","files","reader","FileReader","onloadend","result","readAsDataURL","pk","delete","concat","toString","map","recipe","key","id","className","created_by","src","alt","width","onClick","Fragment","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7678c0d9.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass Login extends React.Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    let user = {\n      username: 'joe',\n      email: '',\n      password: 'joe',\n    }\n\n    axios.post('api/v1/rest-auth/login/', user)\n    .then(res => {\n      console.log(res);\n    })\n    .catch(error => {\n      console.log(error)\n    })\n\n  }\n\n  render () {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <button>Log in</button>\n      </form>\n    )\n  }\n}\n\nexport default Login","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Login from './Login';\nimport { strict } from 'assert';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      image: null,\n      preview: '',\n      recipes: [],\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleImageChange = this.handleImageChange.bind(this);\n\n  }\n\n  componentDidMount() {\n    axios.get('/api/v1/recipes/')\n    .then(res => {\n      this.setState({recipes:res.data});\n    })\n    .catch(error => {\n      console.log(error)\n    })\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = new FormData();\n    formData.append('title', this.state.title);\n    formData.append('image', this.state.image);\n\n    axios.post('/api/v1/recipes/', formData, {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    })\n    .then(res => {\n      let recipes = [...this.state.recipes];\n      recipes.push(res.data);\n\n      this.setState({\n        title: '',\n        image: null,\n        preview: '',\n      })\n    })\n    .catch(error => {\n      console.log(error)\n    })\n  }\n\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  handleImageChange(e) {\n    let file = e.target.files[0];\n    this.setState({image: file});\n    \n    let reader = new FileReader();\n    reader.onloadend = () => {\n      this.setState({preview: reader.result})\n    };\n\n    reader.readAsDataURL(file);\n  }\n\n  handleDelete(pk) {\n    axios.delete('/v1/recipes/'.concat(toString(pk)))\n    .then(res => {\n      console.log(res)\n    })\n    .catch(error => {\n      console.log(error)\n    })\n  }\n\n\n  render() {\n    let recipes = this.state.recipes.map(recipe => (\n      <li key={recipe.id} className='recipe-li'>\n        <p>{recipe.title}</p> by <p>{recipe.created_by}</p><br/>\n        <img src={recipe.image} alt={recipe.title} width=\"200\" className='recipe-img'/>\n        <button onClick={this.handleDelete(recipe.id)} className='del-btn'>x</button>\n      </li>\n    ));\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            Hello, world!\n            <Login />\n            <br/><br/><br/>\n            <form onSubmit={this.handleSubmit}>\n              Image Upload\n              <br/><br/>\n              Title: <input type='text' name='title' value={this.state.title} onChange={this.handleChange}/><br/><br/>\n              Image: <input type='file' name='image' onChange={this.handleImageChange}/><br/><br/>\n              {this.state.image ? (\n                <img src={this.state.preview} alt='preview' width=\"200\"/>\n              ) : (\n                null\n              )}\n              \n              <button>Upload</button>\n            </form>\n            <ol>\n              {recipes}\n            </ol>\n          </header>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}